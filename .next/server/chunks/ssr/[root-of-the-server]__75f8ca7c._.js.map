{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/garage-copied/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-1.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/garage-copied/src/ai/schemas.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Schema for Predictive Maintenance\nexport const PredictiveMaintenanceInputSchema = z.object({\n  vehicleId: z.string().describe('The unique identifier for the vehicle.'),\n  mileage: z.number().describe('The current mileage of the vehicle.'),\n  lastServiceDate: z\n    .string()\n    .describe('The date of the last service (YYYY-MM-DD).'),\n  sensorReadings: z\n    .string()\n    .describe('A summary of sensor readings (e.g., tire pressure, engine temp).'),\n  serviceHistory: z.string().describe('A summary of past service records.').optional(),\n  driverBehaviorSummary: z\n    .string()\n    .describe(\"A summary of the driver's habits (e.g., frequent hard braking).\")\n    .optional(),\n});\nexport type PredictiveMaintenanceInput = z.infer<\n  typeof PredictiveMaintenanceInputSchema\n>;\n\nexport const PredictiveMaintenanceOutputSchema = z.object({\n  predictions: z.array(\n    z.object({\n      potentialIssue: z\n        .string()\n        .describe('The potential issue that might occur (e.g., Brake Pad Wear).'),\n      recommendedAction: z\n        .string()\n        .describe('The recommended maintenance action to perform.'),\n      riskScore: z\n        .number()\n        .min(0)\n        .max(100)\n        .describe(\n          'A risk score from 0-100 indicating the likelihood and severity.'\n        ),\n      preventativeCost: z\n        .number()\n        .describe('The estimated cost to perform the maintenance preventatively.'),\n      potentialFailureCost: z\n        .number()\n        .describe('The estimated cost if the component fails.'),\n    })\n  ),\n});\nexport type PredictiveMaintenanceOutput = z.infer<\n  typeof PredictiveMaintenanceOutputSchema\n>;\n\n// Schema for Driver Behavior Analysis\nexport const DriverBehaviorInputSchema = z.object({\n  driverId: z.string().describe('The unique identifier for the driver.'),\n  speedingIncidents: z\n    .number()\n    .describe('The number of speeding incidents this month.'),\n  harshBrakingEvents: z\n    .number()\n    .describe('The number of harsh braking events this month.'),\n  idlingTimeMinutes: z\n    .number()\n    .describe('Total idling time in minutes this month.'),\n  fuelConsumptionLiters: z\n    .number()\n    .describe('Total fuel consumption in liters this month.'),\n});\nexport type DriverBehaviorInput = z.infer<typeof DriverBehaviorInputSchema>;\n\nexport const DriverBehaviorOutputSchema = z.object({\n  safetyScore: z.number().min(0).max(100).describe('A safety score from 0 to 100.'),\n  fuelEfficiencyScore: z\n    .number()\n    .min(0)\n    .max(100)\n    .describe('A fuel efficiency score from 0 to 100.'),\n  insights: z\n    .array(z.string())\n    .describe('A list of actionable insights for the driver to improve.'),\n});\nexport type DriverBehaviorOutput = z.infer<typeof DriverBehaviorOutputSchema>;\n\n// Schema for Customer Support Chatbot\nexport const CustomerSupportInputSchema = z.object({\n  customerId: z.string().describe('The unique identifier for the customer.'),\n  customerName: z.string().describe(\"The customer's name.\"),\n  message: z.string().describe(\"The customer's message or query.\"),\n  complaints: z\n    .string()\n    .describe(\"A JSON string of the customer's recent service tickets.\"),\n  invoices: z\n    .string()\n    .describe(\"A JSON string of the customer's recent invoices.\"),\n  amc: z\n    .string()\n    .describe(\n      \"A JSON string of the customer's Annual Maintenance Contract details. Can be null.\"\n    ),\n});\nexport type CustomerSupportInput = z.infer<typeof CustomerSupportInputSchema>;\n\nexport const CustomerSupportOutputSchema = z.object({\n  response: z.string().describe(\"The chatbot's response to the customer.\"),\n});\nexport type CustomerSupportOutput = z.infer<typeof CustomerSupportOutputSchema>;\n\n// Schema for Data Analysis\nexport const DataAnalysisInputSchema = z.object({\n  datasetName: z\n    .string()\n    .describe(\n      'The name of the dataset being analyzed (e.g., \"Service Tickets\", \"Inventory Parts\").'\n    ),\n  dataJson: z.string().describe('The dataset to analyze, provided as a JSON string.'),\n});\nexport type DataAnalysisInput = z.infer<typeof DataAnalysisInputSchema>;\n\nexport const DataAnalysisOutputSchema = z.object({\n  keyTrends: z\n    .array(z.string())\n    .describe('A list of the most significant trends or patterns discovered in the data.'),\n  anomalies: z\n    .array(z.string())\n    .describe('A list of any notable anomalies, outliers, or unexpected findings in the data.'),\n  actionableInsights: z\n    .array(z.string())\n    .describe('A list of actionable business insights or recommendations based on the analysis.'),\n  summary: z.string().describe('A brief, high-level summary of the findings.'),\n});\nexport type DataAnalysisOutput = z.infer<typeof DataAnalysisOutputSchema>;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///home/user/garage-copied/src/ai/flows/data-analysis-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview An AI agent for analyzing business data and identifying trends.\n *\n * - analyzeData - A function that takes a dataset and returns insights.\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n  DataAnalysisInputSchema,\n  DataAnalysisOutputSchema,\n  type DataAnalysisInput,\n  type DataAnalysisOutput,\n} from '@/ai/schemas';\n\nconst prompt = ai.definePrompt({\n  name: 'dataAnalysisPrompt',\n  input: { schema: DataAnalysisInputSchema },\n  output: { schema: DataAnalysisOutputSchema },\n  prompt: `You are an expert business analyst for an EV garage named GaragePRO. Your task is to analyze a given dataset and provide a report on key trends, anomalies, and actionable insights.\n\n  You are analyzing the \"{{datasetName}}\" dataset. Here is the data:\n  {{{dataJson}}}\n\n  Instructions:\n  1.  **Identify Key Trends**: Look for patterns over time, common occurrences, or relationships between different data points. For example, are certain types of repairs more common in specific months? Are parts from a particular supplier running out of stock frequently?\n  2.  **Detect Anomalies**: Find any data points that are unusual or deviate from the norm. For instance, a sudden spike in \"Critical\" priority tickets or an unusually long resolution time for a specific technician.\n  3.  **Generate Actionable Insights**: Based on the trends and anomalies, provide specific, practical recommendations for the business. For example, \"Consider stocking more of Part X in Q3 due to recurring demand,\" or \"Technician Y may need additional training on electrical systems, as their resolution times are higher for these issues.\"\n  4.  **Summarize Findings**: Write a short, executive-level summary of the most important conclusions from your analysis.\n  \n  Present your findings clearly and concisely in the requested output format.`,\n});\n\nconst dataAnalysisFlow = ai.defineFlow(\n  {\n    name: 'dataAnalysisFlow',\n    inputSchema: DataAnalysisInputSchema,\n    outputSchema: DataAnalysisOutputSchema,\n  },\n  async (input) => {\n    const { output } = await prompt(input);\n    return output!;\n  }\n);\n\nexport async function analyzeData(\n  input: DataAnalysisInput\n): Promise<DataAnalysisOutput> {\n  return dataAnalysisFlow(input);\n}\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAOA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,oHAAA,CAAA,0BAAuB;IAAC;IACzC,QAAQ;QAAE,QAAQ,oHAAA,CAAA,2BAAwB;IAAC;IAC3C,QAAQ,CAAC;;;;;;;;;;;6EAWkE,CAAC;AAC9E;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa,oHAAA,CAAA,0BAAuB;IACpC,cAAc,oHAAA,CAAA,2BAAwB;AACxC,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,OAAO;AACT;AAGK,eAAe,YACpB,KAAwB;IAExB,OAAO,iBAAiB;AAC1B;;;IAJsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///home/user/garage-copied/.next-internal/server/app/%28app%29/data-insights/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeData as '4030617da26c71b8b95ae16f1857716270d9a07ee8'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":["file:///home/user/garage-copied/src/app/%28app%29/data-insights/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/data-insights/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/data-insights/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///home/user/garage-copied/src/app/%28app%29/data-insights/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(app)/data-insights/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(app)/data-insights/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}